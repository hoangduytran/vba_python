import tkinter as tk
import tkinter.font as tkFont
from tkinter import ttk, filedialog, messagebox
import tkinter.font as tkFont
from enum import Enum
from gv import Gvar as gv, COMMON_WIDGET_STYLE, FONT_BASIC, font_options
from mpp_logger import LOG_LEVELS
from gui_actions import action_list

logger = None
option_style = None

# L·ªõp ToolTip: hi·ªÉn th·ªã tooltip khi con tr·ªè chu·ªôt di chuy·ªÉn v√†o widget
import tkinter as tk
from tkinter import font as tkFont

class ToolTip:
    def __init__(self, widget, text='Th√¥ng tin', max_width=400):
        """
        widget    : widget m√† tooltip g·∫Øn v√†o
        text      : n·ªôi dung vƒÉn b·∫£n hi·ªÉn th·ªã
        max_width : gi·ªõi h·∫°n chi·ªÅu r·ªông t√≠nh theo pixel (n·∫øu text qu√° d√†i, s·∫Ω wrap)
        """
        self.widget = widget
        self.text = text
        self.tipwindow = None
        self.id = None
        self.x = self.y = 0
        self.max_width = max_width

        # G√°n s·ª± ki·ªán di chuy·ªÉn v√†o/ra widget
        widget.bind("<Enter>", self.enter)
        widget.bind("<Leave>", self.leave)

        # Kh·ªüi t·∫°o font cho tooltip
        self.label_font = tkFont.Font(family="Arial", size=15)
        
        # ƒêo chi·ªÅu r·ªông vƒÉn b·∫£n t√≠nh theo pixel
        text_width_px = self.label_font.measure(text)
        
        # N·∫øu vƒÉn b·∫£n + ch√∫t l·ªÅ > max_width, ta s·∫Ω d√πng wrap
        if text_width_px > self.max_width:
            self.wraplength = self.max_width
        else:
            self.wraplength = 0  # =0 nghƒ©a l√† kh√¥ng wrap

    def enter(self, event=None):
        # L√™n l·ªãch hi·ªÉn th·ªã tooltip sau 500ms
        self.schedule()
        
    def leave(self, event=None):
        self.unschedule()
        self.hidetip()
        
    def schedule(self):
        self.unschedule()
        self.id = self.widget.after(1000, self.showtip)
        
    def unschedule(self):
        if self.id:
            self.widget.after_cancel(self.id)
        self.id = None

    def showtip(self, event=None):
        """
        T·∫°o m·ªôt c·ª≠a s·ªï toplevel, hi·ªÉn th·ªã text (c√≥ wrap n·∫øu c·∫ßn).
        ƒê·∫∑t v·ªã tr√≠ ngay d∆∞·ªõi widget.
        """
        # N·∫øu ƒë√£ c√≥ tipwindow ho·∫∑c text r·ªóng, b·ªè qua
        if self.tipwindow or not self.text:
            return

        # T√≠nh to·∫° ƒë·ªô cho tooltip: ngay c·∫°nh d∆∞·ªõi widget
        x = self.widget.winfo_rootx()
        y = self.widget.winfo_rooty() + self.widget.winfo_height() + 5

        # T·∫°o c·ª≠a s·ªï Toplevel cho tooltip
        self.tipwindow = tw = tk.Toplevel(self.widget)
        tw.wm_overrideredirect(True)  # Xo√° vi·ªÅn, thanh title
        tw.wm_geometry("+%d+%d" % (x, y))

        # T·∫°o nh√£n ƒë·ªÉ hi·ªÉn th·ªã text trong tipwindow
        label = tk.Label(
            tw,
            text=self.text,
            justify=tk.LEFT,
            background="#b7c8be",
            relief=tk.SOLID,
            borderwidth=0,
            font=self.label_font
        )

        # N·∫øu c·∫ßn wrap (wraplength > 0), c·∫•u h√¨nh wraplength
        if self.wraplength > 0:
            label.config(wraplength=self.wraplength)

        label.pack(ipadx=5, ipady=5)  # Th√™m ch√∫t padding trong Label

    def hidetip(self):
        if self.tipwindow:
            self.tipwindow.destroy()
        self.tipwindow = None


# L·ªõp Emoji: ƒë·ªãnh nghƒ©a c√°c emoji cho c√°c n√∫t tr√™n thanh c√¥ng c·ª•
class Emoji(Enum):
    SAVE = "üíæ"
    COPY = "üìã"
    PASTE = "üì•"
    SELECT_FONTS = "üî§"
    FONT_SIZE_UP = "üîº"
    FONT_SIZE_DOWN = "üîΩ"
    WRAP_TEXT = "‚Ü©Ô∏è"
    CLEAR = "üóë"  # Emoji cho n√∫t x√≥a log

# L·ªõp LogText: t·∫°o m·ªôt khung ch·ª©a thanh c√¥ng c·ª• v√† v√πng hi·ªÉn th·ªã log
class LogText(tk.Frame):
    def __init__(self, master=None, mp_logging = None, **kwargs):
        """
        Kh·ªüi t·∫°o LogText:
          - T·∫°o m·ªôt frame ch·ª©a thanh c√¥ng c·ª• n·∫±m ·ªü tr√™n v√† v√πng hi·ªÉn th·ªã log ph√≠a d∆∞·ªõi.
          - Bao g·ªìm ph∆∞∆°ng th·ª©c ch√®n log v√† c√°c ch·ª©c nƒÉng c·ªßa thanh c√¥ng c·ª•.
        """
        super().__init__(master, **kwargs)
        global logger

        self.mp_logging = mp_logging
        logger = self.mp_logging.logger  # set global logger

        # T·∫°o khung thanh c√¥ng c·ª• (toolbar) ·ªü tr√™n c√πng
        self.toolbar = tk.Frame(self)
        self.toolbar.pack(side="top", fill="x")
        
        # T·∫°o v√πng Text ƒë·ªÉ hi·ªÉn th·ªã log. Ch·∫ø ƒë·ªô wrap m·∫∑c ƒë·ªãnh l√† "word", undo=True cho ph√©p ho√†n t√°c
        self.log_text = tk.Text(self, wrap="word", undo=True)
        self.log_text.pack(side="bottom", fill="both", expand=True)
        
        # T·∫°o thanh cu·ªôn (scrollbar) cho v√πng Text
        self.scrollbar = tk.Scrollbar(self.log_text, orient="vertical", command=self.log_text.yview)
        self.log_text.configure(yscrollcommand=self.scrollbar.set)
        self.scrollbar.pack(side="right", fill="y")
        
        # Thi·∫øt l·∫≠p font m·∫∑c ƒë·ªãnh cho v√πng Text: v√≠ d·ª•, Arial k√≠ch th∆∞·ªõc 12
        self.font = tkFont.Font(family="Arial", size=12)
        self.log_text.configure(font=self.font)
        
        # G·ªçi h√†m t·∫°o c√°c n√∫t tr√™n thanh c√¥ng c·ª•
        self.create_toolbar()

    def create_toolbar(self):
        """
        T·∫°o c√°c n√∫t tr√™n thanh c√¥ng c·ª• s·ª≠ d·ª•ng emoji ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a trong l·ªõp Emoji.
        C√°c n√∫t c√≥ k√≠ch th∆∞·ªõc l·ªõn (width, height v√† font ƒë∆∞·ª£c tƒÉng) v√† m·ªói n√∫t c√≥ tooltip v·ªõi ti√™u ƒë·ªÅ ti·∫øng Vi·ªát.
        """
        # Thi·∫øt l·∫≠p style TTK cho n√∫t (Button) v√† checkbutton
        global option_style

        self.style = ttk.Style(self)
        # Style cho n√∫t l·ªõn, font Arial 18 ƒë·∫≠m
        self.style.configure(
            "App.TMenubutton",  # T√™n b·∫°n ch·ªçn, th∆∞·ªùng k√®m h·∫≠u t·ªë .TMenubutton
            font=("Arial", 18, "normal"),
            padding=8
        )        
        

        # -----------------------------------------
        # ADD the log_level_menu at the end of toolbar
        # T·∫°o Bi·∫øn chu·ªói cho log_level_var, tham chi·∫øu gv.log_level_var
        # (assuming we still keep it in gv)
        gv.log_level_var = tk.StringVar(value="DEBUG")
        # Drop-down
        self.log_level_menu = ttk.OptionMenu(
            self.toolbar,
            gv.log_level_var,
            gv.log_level_var.get(),  # initial
            *LOG_LEVELS.keys(),
            command=action_list["select_log_level"]
        )
        # Style or config if you want
        self.log_level_menu.config(style="App.TMenubutton", width=15)
        self.log_level_menu["menu"].config(font=FONT_BASIC)
        self.log_level_menu.pack(side="left", padx=5)
        
        ToolTip(self.log_level_menu, text="Ch·ªçn m·ª©c log (DEBUG -> CRITICAL)")

        # exact_check
        gv.is_exact_var = tk.BooleanVar(value=True)
        self.exact_check = tk.Checkbutton(
            self.toolbar,
            text="Duy C·∫•p ƒê·ªô",
            variable=gv.is_exact_var,
            font=FONT_BASIC,
            command=action_list["update_gui_filter"],
        )
        self.exact_check.pack(side="left", padx=5)
        ToolTip(self.exact_check, text="Ch·ªâ hi·ªÉn th·ªã ƒë√∫ng c·∫•p ƒë·ªô n√†y hay t·ª´ n√≥ tr·ªü l√™n")

        # C·∫•u h√¨nh cho c√°c n√∫t: bao g·ªìm emoji, command v√† tooltip (ti√™u ƒë·ªÅ ti·∫øng Vi·ªát)
        buttons_config = [
            {"emoji": Emoji.SAVE.value, "command": self.save_log, "tooltip": "L∆∞u to√†n b·ªô log v√†o t·∫≠p tin"},
            {"emoji": Emoji.CLEAR.value, "command": self.clear_log, "tooltip": "X√≥a log"},  # N√∫t x√≥a log m·ªõi
            {"emoji": Emoji.COPY.value, "command": self.copy_text, "tooltip": "Sao ch√©p vƒÉn b·∫£n ƒë√£ ch·ªçn"},
            {"emoji": Emoji.PASTE.value, "command": self.paste_text, "tooltip": "D√°n vƒÉn b·∫£n t·ª´ clipboard"},
            {"emoji": Emoji.SELECT_FONTS.value, "command": self.select_fonts, "tooltip": "Ch·ªçn ph√¥ng ch·ªØ"},
            {"emoji": Emoji.FONT_SIZE_UP.value, "command": self.font_size_up, "tooltip": "TƒÉng k√≠ch c·ª° ph√¥ng ch·ªØ"},
            {"emoji": Emoji.FONT_SIZE_DOWN.value, "command": self.font_size_down, "tooltip": "Gi·∫£m k√≠ch c·ª° ph√¥ng ch·ªØ"},
            {"emoji": Emoji.WRAP_TEXT.value, "command": self.toggle_wrap, "tooltip": "B·∫≠t/T·∫Øt t·ª± ƒë·ªông xu·ªëng d√≤ng"}
        ]
        # C·∫•u h√¨nh ki·ªÉu chung cho c√°c n√∫t: tƒÉng k√≠ch th∆∞·ªõc (v√≠ d·ª• width=5, height=2, font k√≠ch th∆∞·ªõc 20)
        btn_style = {"font": ("Arial", 20, "bold"), "width": 5, "height": 2}
        # T·∫°o v√† ƒë√≥ng g√≥i c√°c n√∫t v√†o thanh c√¥ng c·ª•
        for config in buttons_config:
            btn = tk.Button(self.toolbar, text=config["emoji"], command=config["command"], **btn_style)
            btn.pack(side="left", padx=5, pady=5)
            # Th√™m tooltip cho m·ªói n√∫t v·ªõi ti√™u ƒë·ªÅ ti·∫øng Vi·ªát
            ToolTip(btn, text=config["tooltip"])
    
    def clear_log(self):
        """
        X√≥a to√†n b·ªô n·ªôi dung c·ªßa v√πng Text log.
        """
        self.log_text.configure(state="normal")
        self.log_text.delete("1.0", tk.END)
        self.log_text.configure(state="disabled")

    def insert_log(self, text):
        """
        Ch√®n n·ªôi dung log v√†o v√πng Text.
        N·ªôi dung ƒë∆∞·ª£c th√™m v√†o cu·ªëi c√πng v√† cu·ªôn xu·ªëng.
        """
        self.log_text.configure(state="normal")
        self.log_text.insert(tk.END, text + "\n")
        self.log_text.configure(state="normal")
        self.log_text.see(tk.END)
    
    def save_log(self):
        """
        When the user chooses to save the log, open a save dialog with file type options for both
        a text file (*.txt) and a JSON file (*.json). If a text file is chosen, write out the content
        of the log text widget. If a JSON file is chosen, copy the temporary log file (which contains
        JSON-formatted logs) to the chosen filename.
        """
        import shutil
        # Open the save dialog with two format choices.
        path = filedialog.asksaveasfilename(
            title="L∆∞u Log v√†o t·∫≠p tin",
            defaultextension=".txt",
            filetypes=[("T·ªáp vƒÉn b·∫£n (*.txt)", "*.txt"), ("T·ªáp JSON (*.json)", "*.json")]
        )
        if path:
            expl = ""
            try:
                if path.lower().endswith(".json"):
                    # For JSON, simply copy the temporary log file,
                    # which is written in JSON-line format.
                    shutil.copyfile(self.mp_logging.log_temp_file_path, path)
                    expl = "to√†n b·ªô n·ªôi dung trong ƒë·ªãnh d·∫°ng JSON"
                else:
                    # For .txt, write out the human-readable log text (from the LogText widget).
                    with open(path, "w", encoding="utf-8") as f:
                        f.write(self.log_text.get("1.0", tk.END))
                    expl = "duy n·ªôi dung trong h·ªôp vƒÉn b·∫£n ·ªü ƒë·ªãnh d·∫°ng vƒÉn b·∫£n th∆∞·ªùng"
                messagebox.showinfo("Th√¥ng b√°o", f"Log ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng v·ªõi {expl}")
                logger.info(f"Log ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng v·ªõi {expl}")
            except Exception as e:
                messagebox.showerror("L·ªói", f"L·ªói khi l∆∞u log: {e}")
    
    def copy_text(self):
        """
        Sao ch√©p vƒÉn b·∫£n ƒë∆∞·ª£c ch·ªçn t·ª´ v√πng Text v√†o clipboard.
        """
        try:
            selected_text = self.log_text.get("sel.first", "sel.last")
            self.clipboard_clear()
            self.clipboard_append(selected_text)
        except tk.TclError:
            pass
    
    def paste_text(self):
        """
        D√°n vƒÉn b·∫£n t·ª´ clipboard v√†o v·ªã tr√≠ con tr·ªè trong v√πng Text.
        """
        try:
            clipboard_text = self.clipboard_get()
            self.log_text.insert(tk.INSERT, clipboard_text)
        except tk.TclError:
            pass
    
    def select_fonts(self):
        """
        Cho ph√©p ng∆∞·ªùi d√πng ch·ªçn ph√¥ng ch·ªØ t·ª´ m·ªôt danh s√°ch ƒë√£ ƒë∆∞·ª£c ƒë·ªãnh s·∫µn.
        M·ªôt c·ª≠a s·ªï con s·∫Ω xu·∫•t hi·ªán v·ªõi c√°c t√πy ch·ªçn ph√¥ng ch·ªØ.
        """
        top = tk.Toplevel(self)
        top.title("Ch·ªçn ph√¥ng ch·ªØ")
        tk.Label(top, text="Ph√¥ng ch·ªØ:").pack(side="left", padx=5, pady=5)
        
        
        var = tk.StringVar(value=self.font.actual("family"))
        option_menu = tk.OptionMenu(top, var, *font_options)
        option_menu["menu"].config(font=FONT_BASIC)
        option_menu.pack(side="left", padx=5, pady=5)
        
        def update_font():
            self.font.configure(family=var.get())
            top.destroy()
        tk.Button(top, text="OK", command=update_font).pack(side="left", padx=5, pady=5)
    
    def font_size_up(self):
        """
        TƒÉng k√≠ch th∆∞·ªõc ph√¥ng ch·ªØ c·ªßa v√πng Text.
        """
        current_size = self.font.actual("size")
        self.font.configure(size=current_size + 2)
    
    def font_size_down(self):
        """
        Gi·∫£m k√≠ch th∆∞·ªõc ph√¥ng ch·ªØ c·ªßa v√πng Text (kh√¥ng gi·∫£m d∆∞·ªõi 1).
        """
        current_size = self.font.actual("size")
        new_size = current_size - 2 if current_size > 2 else 1
        self.font.configure(size=new_size)
    
    def toggle_wrap(self):
        """
        B·∫≠t/T·∫Øt ch·∫ø ƒë·ªô t·ª± ƒë·ªông xu·ªëng d√≤ng cho v√πng Text.
        N·∫øu hi·ªán t·∫°i wrap l√† "word", chuy·ªÉn sang "none"; ng∆∞·ª£c l·∫°i chuy·ªÉn v·ªÅ "word".
        """
        current_wrap = self.log_text.cget("wrap")
        new_wrap = "none" if current_wrap == "word" else "word"
        self.log_text.configure(wrap=new_wrap)
